(window.webpackJsonp=window.webpackJsonp||[]).push([[310],{435:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(1),a=n(9),o=(n(0),n(468)),i={id:"screen-tracking",title:"Screen tracking for analytics",sidebar_label:"Screen tracking for analytics"},c={id:"version-5.x/screen-tracking",title:"Screen tracking for analytics",description:"To track the currently active screen, we need to:",source:"@site/versioned_docs/version-5.x/screen-tracking.md",permalink:"/docs/screen-tracking",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/source/versioned_docs/version-5.x/screen-tracking.md",version:"5.x",sidebar_label:"Screen tracking for analytics",sidebar:"version-5.x/docs",previous:{title:"Deep linking",permalink:"/docs/deep-linking"},next:{title:"Themes",permalink:"/docs/themes"}},s=[{value:"Example",id:"example",children:[]}],u={rightToc:s};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"To track the currently active screen, we need to:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Add a callback to get notified of state changes"),Object(o.b)("li",{parentName:"ol"},"Get the root navigator state and find the active route name")),Object(o.b)("p",null,"To get notified of state changes, we can use the ",Object(o.b)("inlineCode",{parentName:"p"},"onStateChange")," prop on ",Object(o.b)("inlineCode",{parentName:"p"},"NavigationContainer"),". To get the root navigator state, we can use the ",Object(o.b)("inlineCode",{parentName:"p"},"getRootState")," method on the container's ref. Please note that ",Object(o.b)("inlineCode",{parentName:"p"},"onStateChange")," is not called on initial render so you have to set your initial screen separately."),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,"This example shows how to do screen tracking and send to Google Analytics. The approach can be adapted to any other analytics SDK."),Object(o.b)("samp",{id:"screen-tracking-for-analytics"}),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import * as React from 'react';\nimport analytics from '@react-native-firebase/analytics';\nimport { NavigationContainer } from '@react-navigation/native';\n\n// Gets the current screen from navigation state\nconst getActiveRouteName = state => {\n  const route = state.routes[state.index];\n\n  if (route.state) {\n    // Dive into nested navigators\n    return getActiveRouteName(route.state);\n  }\n\n  return route.name;\n};\n\nexport default function App() {\n  const routeNameRef = React.useRef();\n  const navigationRef = React.useRef();\n\n  React.useEffect(() => {\n    const state = navigationRef.current.getRootState();\n\n    // Save the initial route name\n    routeNameRef.current = getActiveRouteName(state);\n  }, []);\n\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      onStateChange={state => {\n        const previousRouteName = routeNameRef.current;\n        const currentRouteName = getActiveRouteName(state);\n\n        if (previousRouteName !== currentRouteName) {\n          // The line below uses the @react-native-firebase/analytics tracker\n          // Change this line to use another Mobile analytics SDK\n          analytics().setCurrentScreen(currentRouteName, currentRouteName);\n        }\n\n        // Save the current route name for later comparision\n        routeNameRef.current = currentRouteName;\n      }}\n    >\n      {/* ... */}\n    </NavigationContainer>\n  );\n}\n")))}l.isMDXComponent=!0},468:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),l=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},p=function(e){var t=l(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,b=p["".concat(i,".").concat(m)]||p[m]||f[m]||o;return n?a.a.createElement(b,c({ref:t},u,{components:n})):a.a.createElement(b,c({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);